version: '3'
services:
  flask:
    build:
      context: app
      dockerfile: Dockerfile
    container_name: flask
    image: neo4jblog-flask
    restart: unless-stopped
    environment:
      FLASK_ENV: "prod"
      FLASK_DEBUG: 0
      APP_PORT: 5000
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: test
      # MONGODB_DATABASE: flaskdb
      # MONGODB_USERNAME: flaskuser
      # MONGODB_PASSWORD: your_mongodb_password
      # MONGODB_HOSTNAME: mongodb
    volumes:
      - ./app:/var/www
    command: gunicorn -w 4 --bind=0.0.0.0:5000 "flaskr:create_app()"
    depends_on:
      - neo4j
    networks:
      - frontend
      - backend

  neo4j:
    image: neo4j:3.5
    container_name: neo4j
    restart: unless-stopped
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      # - ./conf:/conf
      # - ./data:/data
      # - ./import:/import
      # - ./logs:/logs
      # - ./plugins:/plugins
      - neo4jdata:/conf
      - neo4jdata:/data
      - neo4jdata:/import
      - neo4jdata:/logs
      - neo4jdata:/plugins
    environment: 
      - NEO4J_AUTH=neo4j/test
      # Raise memory limits
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms.memory.heap.initial_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G
    networks:
      - backend

  webserver:
    build:
      context: nginx
      dockerfile: Dockerfile
    image: neo4jblog-webserver
    container_name: webserver
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webserver"
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - nginxdata:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  neo4jdata:
    driver: local
  # appdata:
    # driver: local
  nginxdata:
    driver: local
